package backend.controller;

import backend.dto.EntityDTO;
import backend.model.CreateUser;
import backend.repository.UserRepository;
import backend.service.UserService;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.time.ZonedDateTime;
import java.util.List;
import java.util.stream.Collectors;

@RestController
public class UserController1 {

    private final UserRepository userRepository;
    private final UserService userService;

    public UserController1(UserRepository userRepository, UserService userService) {
        this.userRepository = userRepository;
        this.userService = userService;
    }

    @RequestMapping("/create-users")
    @PostMapping
    public CreateUser createUser(@RequestBody EntityDTO entityDTO) {
        CreateUser createUser = new CreateUser();
        createUser.setUserName(entityDTO.getUserName());
        createUser.setPassword(entityDTO.getPassword());
        createUser.setEmail(entityDTO.getEmail());
        createUser.setPhoneNumber(entityDTO.getPhoneNumber());
        createUser.setPosition(entityDTO.getPosition());
        createUser.setCreatedAt(ZonedDateTime.now());
        createUser.setUpdatedAt(ZonedDateTime.now());
        createUser.setScheduleNo(0);
        CreateUser user = userRepository.save(createUser);

        return user;
    }

    @GetMapping("/all-users")
    public List<EntityDTO> getUsers() {
        return userRepository.findAll().stream().map(user -> {
            EntityDTO dto = new EntityDTO();
            dto.setUserId(user.getUserId());
            dto.setUserName(user.getUserName());
            dto.setEmail(user.getEmail());
            dto.setPhoneNumber(user.getPhoneNumber());
            dto.setPosition(user.getPosition());
            dto.setCreatedAt(user.getCreatedAt());
            dto.setUpdatedAt(user.getUpdatedAt());
            dto.setScheduleNo(user.getScheduleNo());
            return dto;
        }).collect(Collectors.toList());
    }

    @PatchMapping("/update-users")
    public ResponseEntity<CreateUser> updateUser(@RequestHeader("userId") Long userId,
                                                 @RequestBody CreateUser updateUser) {
        CreateUser createUser = userService.updateUser(userId, updateUser);
        return ResponseEntity.ok(createUser);
    }

    @DeleteMapping("/delete-users")
    public ResponseEntity<Void> deleteUser(@RequestHeader("userId") Long userId) {
        if (!userRepository.existsById(userId)) {
            return ResponseEntity.notFound().build();
        }

        userRepository.deleteById(userId);
        return ResponseEntity.noContent().build(); // 204 No Content
    }
}




